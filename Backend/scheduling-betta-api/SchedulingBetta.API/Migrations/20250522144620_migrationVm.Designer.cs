// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace SchedulingBetta.API.Migrations
{
    [DbContext(typeof(SchedulingDbContext))]
    [Migration("20250522144620_migrationVm")]
    partial class migrationVm
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SchedulingBetta.API.Domain.Entities.EventEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AvailableSlots")
                        .HasColumnType("integer")
                        .HasColumnName("available_slots");

                    b.Property<DateTime?>("BreakEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("break_end");

                    b.Property<DateTime?>("BreakStart")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("break_start");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("NOW()");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_time");

                    b.Property<bool>("HasBreak")
                        .HasColumnType("boolean")
                        .HasColumnName("has_break");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("location");

                    b.Property<int>("SessionDuration")
                        .HasColumnType("integer")
                        .HasColumnName("session_duration");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_time");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.ToTable("events", null, t =>
                        {
                            t.HasCheckConstraint("CK_Event_BreakTimes", "(has_break = false) OR (has_break = true AND break_start IS NOT NULL AND break_end IS NOT NULL AND break_end > break_start)");

                            t.HasCheckConstraint("CK_Event_Period", "\"end_time\" > \"start_time\"");
                        });
                });

            modelBuilder.Entity("SchedulingBetta.API.Domain.Entities.EventSchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("NOW()");

                    b.Property<int>("EventId")
                        .HasColumnType("integer")
                        .HasColumnName("event_id");

                    b.Property<DateTime>("ScheduleTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("schedule_time");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasDefaultValue("Active")
                        .HasColumnName("status");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("UserId", "ScheduleTime")
                        .IsUnique()
                        .HasDatabaseName("IX_User_ScheduleTime");

                    b.ToTable("event_schedules", (string)null);
                });

            modelBuilder.Entity("SchedulingBetta.API.Domain.Entities.InterestedUserEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("NOW()");

                    b.Property<int>("EventId")
                        .HasColumnType("integer")
                        .HasColumnName("event_id");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("EventId", "UserId")
                        .IsUnique()
                        .HasDatabaseName("IX_Event_User");

                    b.ToTable("event_interested_users", (string)null);
                });

            modelBuilder.Entity("SchedulingBetta.API.Domain.Entities.EventSchedule", b =>
                {
                    b.HasOne("SchedulingBetta.API.Domain.Entities.EventEntity", "Event")
                        .WithMany("Schedules")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("SchedulingBetta.API.Domain.Entities.InterestedUserEntity", b =>
                {
                    b.HasOne("SchedulingBetta.API.Domain.Entities.EventEntity", "Event")
                        .WithMany("InterestedUsers")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("SchedulingBetta.API.Domain.Entities.EventEntity", b =>
                {
                    b.Navigation("InterestedUsers");

                    b.Navigation("Schedules");
                });
#pragma warning restore 612, 618
        }
    }
}
